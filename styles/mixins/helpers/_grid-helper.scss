@import "scaled";
@import "../lib/strip-unit";

/*
 * Grid generator mixins
 */

/**
 * Grid row mixin
 */
@mixin grid-row () {
    display: flex;
    flex-wrap: wrap;
}

/**
 * Set gutter
 *
 * @property {number} $gutter Gutter
 * @property {map|null} $namespaces Grid column and offset classnames
 */
@mixin grid-row-pad-gutter ($gutter, $namespaces: null) {
    $col: if($namespaces and map-has-key($namespaces, column), map-get($namespaces, column), '.col');
    $margin: ($gutter / -2);
    $padding: ($gutter / 2);

    @if is-css-variable($gutter) {
        $margin: calc(#{ $gutter } / -2);
        $padding: calc(#{ $gutter } / 2);
    }

    margin-left:  $margin;
    margin-right: $margin;

    > #{ $col } {
        padding-left:  $padding;
        padding-right: $padding;
    }
}

/**
 * Mixin to generate paddings between grid columns
 *
 * @property {map} $grid-config Grid configuration
 * @property {map|null} $namespaces Grid column and offset classnames
 */
@mixin grid-row-pad ($grid-config, $namespaces: null) {
    // We use last known gutter to make sure value 0 overwrites any
    // previously set value, but at the same time that we don't output
    // unnecessary duplicate code, eg. setting "0" gutter on all breakpoints
    $last-known-gutter-value: 0;

    @each $breakpoint, $config in $grid-config {
        @if map-has-key($config, 'gutter') {
            $gutter: map-get($config, 'gutter');

            @if $gutter or $last-known-gutter-value {
                $gutter: scaled($gutter);

                @if is-valid-media-breakpoint('#{$breakpoint}-up') {
                    @include media-breakpoint('#{$breakpoint}-up') {
                        @include grid-row-pad-gutter($gutter, $namespaces);
                    }
                } @else if is-valid-media-breakpoint('#{$breakpoint}') {
                    @include media-breakpoint('#{$breakpoint}') {
                        @include grid-row-pad-gutter($gutter, $namespaces);
                    }
                }
            }

            $last-known-gutter-value: $gutter;
        }
    }
}


/**
 * Generate grid alignment classnames
 *
 * @property {map} $grid-config Grid configuration
 */
@mixin grid-alignment ($grid-config) {
    @each $breakpoint, $config in $grid-config {
        @include media-breakpoint('#{$breakpoint}-up') {
            // Horizontal alignment
            // &--start-#{$breakpoint} {
            //     justify-content: flex-start;
            //     text-align: start;
            // }
            // &--center-#{$breakpoint} {
            //     justify-content: center;
            //     text-align: center;
            // }
            // &--end-#{$breakpoint} {
            //     justify-content: flex-end;
            //     text-align: end;
            // }

            // Vertical alignment
            &--top-#{$breakpoint} {
                align-items: flex-start;
            }
            &--middle-#{$breakpoint} {
                align-items: center;
            }
            &--bottom-#{$breakpoint} {
                align-items: flex-end;
            }

            // Spacing
            // &--around-#{$breakpoint} {
            //     justify-content: space-around;
            // }
            // &--between-#{$breakpoint} {
            //     justify-content: space-between;
            // }

            // Order
            .col--order-first-#{$breakpoint} {
                order: -1;
            }
            .col--order-normal-#{$breakpoint} {
                order: 0;
            }
            .col--order-last-#{$breakpoint} {
                order: 1;
            }
        }
    }
}


/**
 * Mixin to generate column classnames for each resolutions
 *
 * @property {map} $grid-config Grid column configuration
 * @property {map|null} $namespaces Grid column and offset classnames
 */
@mixin grid-columns ($grid-config, $namespaces: null) {
    $col: if($namespaces and map-has-key($namespaces, column), map-get($namespaces, column), '.col');

    #{ $col } {
        flex: 1;         // allow growing to accomodate all content, no specific size
        max-width: 100%; // prevent overflowing
    }

    @each $breakpoint, $config in $grid-config {
        @include media-breakpoint('#{$breakpoint}-up') {
            @include grid-columns-breakpoint($config, $breakpoint, $namespaces);
        }
    }
}

@mixin grid-columns-breakpoint ($config, $breakpoint, $namespaces: null) {
    $col: if($namespaces and map-has-key($namespaces, column), map-get($namespaces, column), '.col');
    $offset: if($namespaces and map-has-key($namespaces, offset), map-get($namespaces, offset), '.offset');

    $columns: map-get($config, 'columns');
    $unit: map-get($config, 'unit');

    @if not $unit {
        $unit: 100%;
    } @else if unitless($unit) {
        @error "Grid column width can't be without a unit \"#{ $unit }\", please add unit, eg. \"#{ $unit * 1% }\", \"#{ $unit * 1vw }\"";
    }

    @if $columns {
        @for $i from 1 through $columns {
            $width: $i / $columns * $unit;

            #{ $col }--#{$breakpoint}-#{$i} {
                @include grid-column($width);
            }
            #{ $offset }--#{$breakpoint}-#{$i} {
                @include grid-offset($width);
            }
            // .height--#{$breakpoint}-#{$i} {
            //     height: $width;
            // }
        }

        #{ $col }--#{$breakpoint}-full {
            @include grid-column(100%);
        }
        #{ $offset }--#{$breakpoint}-0 {
            @include grid-offset(0);
        }
        // .height--#{$breakpoint}-auto {
        //     height: auto;
        // }
    }

    // Custom column widths
    $custom: map-get($config, 'custom');

    @if $custom and type-of($custom) == 'map' {
        @each $name, $width in $custom {
            #{ $col }--#{$breakpoint}-#{$name} {
                @include grid-column($width);
            }
            #{ $offset }--#{$breakpoint}-#{$name} {
                @include grid-offset($width);
            }
            // .height--#{$breakpoint}-#{$i} {
            //     height: $width;
            // }
        }
    }

    // Column wihch takes as little space as needed
    #{ $col }--#{$breakpoint}-auto {
        @include grid-column-auto();
    }

    // Column fills all available space
    #{ $col }--#{$breakpoint}-fill {
        @include grid-column-fill();
    }

    // Column auto size
    #{ $col }--#{$breakpoint}-fit {
        @include grid-column-fit();
    }
}


/**
 * Fix for vw units 16.667 -> 16.66
 * Needed to prevent columns inside the columns from wrapping
 */

@function grid-column-precision-fix ($width) {
    @if unit($width) == 'vw' {
        $unit: ($width - $width + 1);
        $width-str: "#{ $width }";
        $dot-index: str-index($width-str, '.');

        @if $dot-index and str-length($width-str) - $dot-index > 4 {
            $width-str: str-slice($width-str, 1, $dot-index + 4);
            @return str-to-number($width-str) * $unit;
        } @else {
            @return $width;
        }
    } @else {
        @return $width;
    }
}


/*
 * 1. Fix for IE where paddings are not taken into account even with box-sizing
 * 2. Fix for Firefox, if content is larger than grid item then grid element extends
 */

@mixin grid-column ($width) {
    $width-fixed: grid-column-precision-fix($width);

    flex: 0 1 $width-fixed;
    width: $width-fixed;
}

@mixin grid-offset ($width) {
    $width-fixed: grid-column-precision-fix($width);
    margin-left: $width-fixed;
}

/**
 * Grid column which takes as specific size
 *
 * @property {number} $width Column width
 */
@mixin grid-column-fixed ($width) {
    flex: 0 0 $width;
    width: $width;
}

/**
 * Grid column which takes as little space as necessery
 *
 * @property {number} $unit Grid unit, default `100%`
 */
@mixin grid-column-auto () {
    flex: 0 0 auto;
    width: auto;
}

/**
 * Grid column which takes all available space
 *
 * @property {number} $unit Grid unit, default `100%`
 */
@mixin grid-column-fill () {
    flex: 1 1 auto;
    width: auto;
}

/**
 * Grid column which takes all available space
 *
 * @property {number} $unit Grid unit, default `100%`
 */
@mixin grid-column-fit () {
    flex: 1;
    width: auto;
}
