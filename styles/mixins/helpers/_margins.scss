/**
 * Add top, right, bottom or left to the property name
 * Handles property names with '-width' in them, eg. border-width
 *
 * @param {String} $property - Property name
 * @param {String} $side - Property side name
 * @return {String} - Full property name
 */
@function getMarginPropertyName ($property, $side) {
    $postfix: '-width';
    $index: str-index($property, $postfix);

    @if $index != null { // 'border-width' or something
        $prefix: str-slice($property, 1, $index - 1);
        @return $prefix + '-' + $side + $postfix; // eg. border-top-width
    } @else {
        @return $property + '-' + $side; // eg. padding-top
    }
}


@mixin margins ($values, $reset-first-last: true, $property: 'margin') {
    $type: type-of($values);

    @if $type != 'map' {
        $values: (xs: $values);
    }

    // Find which of 'top', 'left', 'right', 'bottom' are used
    $initial: true;
    $top-used: false;
    $right-used: false;
    $bottom-used: false;
    $left-used: false;

    // Validation
    @each $breakpoint, $value in $values {
        @if is-valid-media-breakpoint('#{$breakpoint}-up') {
            @if length($value) > 0 {
                @if css-nth($value, 1) != inherit {
                    @if $initial {
                        $top-used: true;
                    } @else if not $top-used {
                        @error "Top #{ $property } for (#{ $values }) breakpoint '#{ $breakpoint }' is not 'inherit', it must be either 'inherit' or some value for all breakpoints";
                    }
                } @else if $top-used {
                    @error "Top #{ $property } for (#{ $values }) breakpoint '#{ $breakpoint }' must not be 'inherit', it must be either 'inherit' or some value for all breakpoints";
                }

                @if css-nth($value, 2) != inherit {
                    @if $initial {
                        $right-used: true;
                    } @else if not $right-used {
                        @error "Right #{ $property } for (#{ $values }) breakpoint '#{ $breakpoint }' is not 'inherit', it must be either 'inherit' or some value for all breakpoints";
                    }
                } @else if $right-used {
                    @error "Right #{ $property } for (#{ $values }) breakpoint '#{ $breakpoint }' must not be 'inherit', it must be either 'inherit' or some value for all breakpoints";
                }

                @if css-nth($value, 3) != inherit {
                    @if $initial {
                        $bottom-used: true;
                    } @else if not $bottom-used {
                        @error "Bottom #{ $property } for (#{ $values }) breakpoint '#{ $breakpoint }' is not 'inherit', it must be either 'inherit' or some value for all breakpoints";
                    }
                } @else if $bottom-used {
                    @error "Bottom #{ $property } for (#{ $values }) breakpoint '#{ $breakpoint }' must not be 'inherit', it must be either 'inherit' or some value for all breakpoints";
                }

                @if css-nth($value, 4) != inherit {
                    @if $initial {
                        $left-used: true;
                    } @else if not $left-used {
                        @error "Left #{ $property } for (#{ $values }) breakpoint '#{ $breakpoint }' is not 'inherit', it must be either 'inherit' or some value for all breakpoints";
                    }
                } @else if $left-used {
                    @error "Left #{ $property } for (#{ $values }) breakpoint '#{ $breakpoint }' must not be 'inherit', it must be either 'inherit' or some value for all breakpoints";
                }

                $initial: false;
            }
        } @else {
            @error "Media query with name '#{ $breakpoint }' is not valid, definition not found!";
        }
    }

    // Apply styles
    @if $top-used and $right-used and $bottom-used and $left-used {
        #{ $property }: adaptive-value($values);
    } @else {
        @if $top-used {
            #{ getMarginPropertyName($property, 'top') }: adaptive-value(breakpoint-pick-css-nth($values, 1, null));
        }
        @if $right-used {
            #{ getMarginPropertyName($property, 'right') }: adaptive-value(breakpoint-pick-css-nth($values, 2, null));
        }
        @if $bottom-used {
            #{ getMarginPropertyName($property, 'bottom') }: adaptive-value(breakpoint-pick-css-nth($values, 3, null));
        }
        @if $left-used {
            #{ getMarginPropertyName($property, 'left') }: adaptive-value(breakpoint-pick-css-nth($values, 4, null));
        }
    }

    // Reset first and last children
    @if $reset-first-last {
        @if $top-used or $left-used {
            &:first-child {
                @if $top-used {
                    #{ getMarginPropertyName($property, 'top') }: 0;
                }
                @if $left-used {
                    #{ getMarginPropertyName($property, 'left') }: 0;
                }
            }
        }
        @if $bottom-used or $right-used {
            &:last-child {
                @if $bottom-used {
                    #{ getMarginPropertyName($property, 'bottom') }: 0;
                }
                @if $right-used {
                    #{ getMarginPropertyName($property, 'right') }: 0;
                }
            }
        }
    }
}

@mixin margins-top-bottom ($values, $reset-first-last: true, $property: 'margin') {
    @include margins(breakpoint-pick-top-bottom($values), $reset-first-last, $property);
}

@mixin margins-top ($values, $reset-first-last: true, $property: 'margin') {
    // Top margin only, rest margins are untouched
    $top-index: 1; // in CSS 1st property is top
    @include margins(breakpoint-pick-css-nth($values, $top-index), $reset-first-last, $property);
}

@mixin margins-bottom ($values, $reset-first-last: true, $property: 'margin') {
    // Bottom margin only, rest margins are untouched
    $bottom-index: 3; // in CSS 3rd property is bottom
    @include margins(breakpoint-pick-css-nth($values, $bottom-index), $reset-first-last, $property);
}

